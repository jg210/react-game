* Demolition game.
  - rename magnet to magnetConstraint
  - rename bar to magnet
  - make obstacles stick to initial position
  - score points when objects dislodged.
  - shape bar to "hold" the ball
    - otherwise ball wobbles too much when move bar.
  - next level when everything stops moving
    - check positions every second, then on next update if nothing moved
  - tune friction and inertia?
  - better control of ball position.
  - remove level drop-down box.  
  - indicate when points are won with balloons?
  - replace ball with anvil
    - change image
    - use anvil-shaped matter.js Body
    - rename js field
  - add images for obstacles.
  - add cable for electromagnet

* Should GameOver saga handle score change?
  - currently, GAME_OVER Action triggers reducer and saga.

* Stop GameEngine for a second before showing Game Over screen?
  - preventing further scoring
  - fade animation?

* unit tests

* review redux and react-redux documentation etc. and refine implementation

* no typescript extensions => no js formatter in VSC?

* logging library.

* https://www.npmjs.com/package/eslint-plugin-react-redux?

* add some jest snaphshot tests.

* Marked collisions leak memory.
  - remove them?
  - fade out with time?
  - show number of points gained?
 
* Accelerating bar movement.
  - add impulse on key press (and damping), don't just move bar?
    - no, since bar needs to be "static" for elastic collisions
  - use hidden, dynamic bar to model physics, updating position of a
    static bar on every update?

* Better UI layout.

* Change favicon.ico.

* Add back publish script.
  - inject URL via env. var.

* Test server.

* Mouse-based movement of bar.
  - MouseConstraint?
    - https://www.youtube.com/watch?v=W-ou_sVlTWk&list=PLRqwX-V7Uu6akvoNKE4GAxf6ZeBYoJ4uh&index=24
      - MouseConstraint connected to Mouse connected to canvas.elt
      - Mouse.pixelRatio = pixelDensity(); // retina displays, p5 canvas required?
      - add MouseConstraint to world.
      - bar can't be static, but bar has to be static...
      - tunnelling is likely to be a problem

* fix min and max velocity on collision?
  - as function of bar height, conserving energy

* Toggle for marked collisions?
  - connecting react to non-react JavaScript...

* Importing Foo wrapped with react-redux connect as Foo using default export is unclear.
  - it's not immediately obvious that component Foo is wrapped.