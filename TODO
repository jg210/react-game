* Set GameEngine initial field values when define fields, not in constructor.

* Allow per-Screen props.

* Reattaching ball to magnet stops next-level detection working.

* js crash (in reducer) only shown in debug console.
  - a backtrace on screen in debug build would make testing better.
  - what about release build?

* Show Game Over if run out of levels.
  - currently, get infinite number of levels, but level selector breaks at 14.

* Review and refactor sagas and reducers.
  - LEVEL_CHANGE and NEXT_LEVEL actions are too similar.

* Indicate when points are won.
  - numbered bubbles that fade out over time.

* Replace ball with anvil
  - change image
  - use anvil-shaped matter.js Body
  - rename js field
  
* Add images for objects.

* Electromagnet image.

* Add cable for electromagnet.

* Better control of magnet position?

* Should GameOver saga handle score change?
  - currently, GAME_OVER Action triggers reducer and saga.

* unit tests

* review redux and react-redux documentation etc. and refine implementation

* no typescript extensions => no js formatter in VSC?

* Instructions.

* logging library.
  - console.log()
    - chrome records log location in code if just use console.log()    
    - no timestamps or levels
  - winston
    - not working with react: https://github.com/winstonjs/winston/issues/1495
  - write my own
    - needs some unit testing
  - log4js
    - which one?!
  - pino
    - doesn't do formatting
  - bunyan
    - json logs

* https://www.npmjs.com/package/eslint-plugin-react-redux?

* Add some jest snaphshot tests.
 
* Change favicon.ico.

* Add back publish script.
  - inject URL via env. var.

* Test server.

* Mouse-based movement of bar.
  - MouseConstraint?
    - https://www.youtube.com/watch?v=W-ou_sVlTWk&list=PLRqwX-V7Uu6akvoNKE4GAxf6ZeBYoJ4uh&index=24
      - MouseConstraint connected to Mouse connected to canvas.elt
      - Mouse.pixelRatio = pixelDensity(); // retina displays, p5 canvas required?
      - add MouseConstraint to world.
      - bar can't be static, but bar has to be static...
      - tunnelling is likely to be a problem

* fix min and max velocity on collision?
  - as function of bar height, conserving energy

* Toggle for marked collisions?
  - connecting react to non-react JavaScript...

* Importing Foo wrapped with react-redux connect as Foo using default export is unclear.
  - it's not immediately obvious that component Foo is wrapped.

* Localization.